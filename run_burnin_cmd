#!/bin/bash

#====================================
# Descript: Collect Unit Burnin Logs
# Usage: ./run_burnin_cmd #Kanzi-CableName#
# Create: 2020-03-18
# Author: Cyril
# Copyright: FX-CoreOS
# Update: 2020-03-14
# 	1. It rely on copyUnrestricted & nanokdp, no need panictools.py
#====================================
echo -e "\033[46;34m#======================================================================#\033[0m"
echo -e "\033[46;34m| ------------------------- PanicTools V1.0 -------------------------- |\033[0m"
echo -e "\033[46;34m| ScriptName: ./run_burnin_cmd                                         |\033[0m"
echo -e "\033[46;34m| UsageTips: Please using only one Kanzi-cable plugged in station.     |\033[0m"
echo -e "\033[46;34m| UsageTips: Please closed nanokdp terminal before running this script.|\033[0m"
echo -e "\033[46;34m#======================================================================#\033[0m"

mkdir -p /tmp/panictools &> /dev/null  ## create tmp folder for panictools
log_path="/tmp/panictools/run_burnin_cmd.log"
echo "" > $log_path   ## Clean log file
sed '/10022/d' ~/.ssh/known_hosts > ~/.ssh/known_hosts  ## Clean known hosts nor new unit can't be connected.

# Show stage start string
showStart() {
	stage_num=$1
	stage_string=$2

	echo -e "\033[34;47;1m[Stage $stage_num]\033[34;47;0m $stage_string."
}

# Show stage result string by format
# Need two arguments: stage number and exec_status number
showResult() {
	stage_num=$1
	exec_stat=$2

	if(($exec_stat==0));then
		echo -e "\033[49;32;1mDone\033[49;32;0m"
		return 0
	else
		echo -e "\033[31;49;1mFail\033[31;49;0m"
		exit 9
	fi
}

# Probe name exchange between nanokdp and astrisctl
# prefixNameExchange kanzi-30EE71       ## nanokdp
# prefixNameExchange KanziSWD-30EE71    ## astris
prefixNameExchange() {

        probeName=$1

        if [[ $probeName =~ 'SWD-' ]];then
                ## echo "Astris probe"
                prefix=`echo $probeName | cut -d "-" -f1`
                suffix=`echo $probeName | cut -d "-" -f2`
                prefix=${prefix/SWD/}
                prefix=`echo $prefix | tr '[A-Z]' '[a-z]'`
                new_probe_name="$prefix-$suffix"

                echo $new_probe_name

        elif [[ $probeName =~ '-' ]];then
                ## echo "Nanokdp probe"
                prefix=`echo ${probeName:0:1} | tr '[a-z]' '[A-Z]'`
                new_probe_name="${prefix}${probeName:1}"
                new_probe_name=${new_probe_name/-/SWD-}

                echo $new_probe_name
        else
                echo "ERROR: Unrecognized probe [$probeName]."
                exit -1
        fi

}

# Get all units locationId and mode(except Diags mode) which have connected to station
getLocIDAndMode() {

#    get_SPUSBData=`/usr/sbin/system_profiler SPUSBDataType | egrep "DCSD USB UART:|Kanzi:|iPhone|Serial Number:*|Location ID:*|Apple Mobile Device*"`

    py_cmd="""
import re, commands
pattern_cable_name = \"Serial Number: ([a-zA-Z0-9]+)\"
pattern_cable_locid = \"Location ID: ([a-zA-Z0-9]+)\"
pattern_unitsn_recovery = \"SRNM:\[([a-zA-Z0-9]+)\]\"

status, info_arr = commands.getstatusoutput('/usr/sbin/system_profiler SPUSBDataType | egrep \"DCSD USB UART:|Kanzi:|iPhone|Serial Number:*|Location ID:*|Apple Mobile Device*\"')

info_arr = info_arr.split(\"\n\")
for i in range(len(info_arr)):
	a = (
		re.search(\"iPhone:\", info_arr[i]),		  # OS mode
		re.search(\"Apple Mobile Device \(Recovery Mode\):\", info_arr[i]), # Recovery mode
		re.search(\"Apple Mobile Device \(DFU Mode\):\", info_arr[i]))	  # DFU mode

	if a[0] or a[1] or a[2]:
		if a[0]:
			mode = \"iOS\"
		elif a[1]:
			mode = \"Recovery\"
		elif a[2]:
			mode = \"DFU\"
		else:
			pass

		try:
			cable_name = re.search(pattern_cable_name, info_arr[i - 2]).group().split(\":\")[1].strip()
			loc_id = re.search(pattern_cable_locid, info_arr[i + 2]).group().split(\":\")[1].strip()
			print(\"getLocIDAndMode: ProbeName={} LocationId={} Mode={}\".format(cable_name, loc_id, mode))
		except Exception as e:
			print(e)
			exit(1)
		else:
			if a[2]:	# Recovery模式下读取SN
				g = re.search(pattern_unitsn_recovery, info_arr[i + 1])
				if g:
					unit_sn = g.group()[6:-1]
					print(\"UnitSN={}\".format(unit_sn))
			exit(0)
"""

	res=`python -c "$py_cmd"`
	if ((`echo $res | grep getLocIDAndMode >>/dev/null ; echo $?`==0));then
		echo $res;
		return 0
	else
		return 1
	fi
}

showStart 0 "Checking if connected 1x kanzi-probe"
probeNum=`astrisctl list | grep KanziSWD | wc -l`
probeName=`astrisctl list | grep KanziSWD- `
if(($probeNum==1));then
        echo "Checking 1x probe connected, continue"
	astrisctl --force-kick --host localhost:$probeName kis 0 &>/dev/null 
	# set kis=0 
	if(($?==0));then showResult 0 0; else echo -e "Setting kis=0 \033[31;49;1mFail\033[31;49;0m" ; showResult 0 0; fi;
else
        echo "Checking fail, probe_num=[$probeNum]. exit"
	showResult 0 1
fi

showStart 1 "Rebooting unit..."
noprefix_probeName=`echo $probeName | cut -d '-' -f2`
if((`getLocIDAndMode | grep $noprefix_probeName | grep iOS >>$log_path; echo $?`==0));then
	echo "Unit under iOS mode, skip rebooting and goto [Stage 5]"
	showResult 1 0
	## goto ios_tag
else
	if((`getLocIDAndMode | grep $noprefix_probeName | grep Recovery >>$log_path; echo $?`!=0));then
		astrisctl reset --force-kick --host localhost:$probeName 
		sleep 3
		showResult 1 $?
	else
		echo "Unit under Recovery mode, no need rebooting."
	fi

showStart 2 "Waiting entering to Recovery..."
# change probename from astrisctl to nanokdp type
probeName=`prefixNameExchange $probeName`

iboot_cmd_1="""
set timeout 30
spawn nanokdp -d /dev/cu.$probeName -L $log_path
expect -re \"Use Ctrl(.*)for menu\" { send \"\r\n\" ; sleep 2; send \"\r\n\" ; exp_continue } 
expect -re \"nvme_init_controller DONE\" { send \"\r\n\r\n\" ; exp_continue } 
expect -re \"]\" { send \"printenv\r\n\" }
expect eof
"""

env_str=`expect -c "$iboot_cmd_1"`
if ((`echo "${env_str}" | grep boot-args >>$log_path; echo $?`!=0));then
        echo -e "ERROR: Not found boot-args in unit, setting boot-args \033[31;49;1mfailed\033[31;49;0m exit."
	ps -ef | grep "nanokdp -d /dev/cu.$probeName" | grep -v "grep" | awk -F ' ' '{print $2}' | xargs kill -9 &>/dev/null  ## kill nanokdp proc when exit error
	showResult 2 1
else
	showResult 2 0
fi


showStart 3 "Delete Burnin Boot-args and goto OS mode..."
b_args=`echo "${env_str}" | grep boot-args | awk -F ' = ' '{print $2}'`
echo "origin_boot-args=$b_args"
no_burnin_args=${b_args/astro=factory\/burnin/}
no_burnin_args=${no_burnin_args/\"/}
no_burnin_args=${no_burnin_args/\"/}
echo "new_boot_args=$no_burnin_args"

iboot_cmd_2="""
set timeout 5
spawn nanokdp -d /dev/cu.$probeName -L $log_path
expect -re \"Use Ctrl\" { send \"\r\n\" ; sleep 1; send \"\r\n\";  }
expect -re \"]\" { send \"setenv boot-args ${no_burnin_args} \r\n\" }
expect -re \"]\" { send \"setenv auto-boot true \r\n\" }
expect -re \"]\" { send \"setenv boot-command fsboot \r\n\" }
expect -re \"]\" { send \"saveenv\r\n\" }
expect -re \"]\" { send \"fsboot\r\n\" }
expect eof
"""
if((`expect -c "$iboot_cmd_2" >>$log_path ; echo $?;`==0));then
        echo "Delete burnin boot-args successful"
		showResult 3 0
else
        showResult 3 1
fi

showStart 4 "Waitting entering to iOS..."
getLocIDAndMode | grep $noprefix_probeName |  grep iOS &>/dev/null
while(($?!=0))
do
        sleep 1
        getLocIDAndMode | grep $noprefix_probeName | grep iOS &>/dev/null
done
showResult 4 $?

# GOTO it if unit under iOS mode   ios_tag
fi

showStart 5 "Collecting Burnin Logs..."
location_id=`getLocIDAndMode | grep $noprefix_probeName | grep LocationId | awk -F ' ' '{print $3}' | awk -F '=' '{print $2}'`
if [[ $location_id != "" ]];then
	mkdir logs/ ;
	copyUnrestricted -u $location_id -s /private/var/logs/Astro -t logs/ >>$log_path ;
	if(($?==0));then
		echo "Copy logs from unit successful"
	else
		echo -e "Copy logs from unit \033[31;49;1mfailed\033[31;49;0m"
		exit 1
	fi
	zip -qr ./logs/Astro.zip ./logs/Astro >>$log_path ;
	showResult 5 $?
else
	echo -e "ERROR: Get locationid \033[31;49;1mfailed\033[31;49;0m" ;
	showResult 5 1
fi


showStart 6 "Opening logs folder..."
open logs/
showResult 6 $?

echo -e "\033[49;30;1mFinish!\033[49;30;0m"



